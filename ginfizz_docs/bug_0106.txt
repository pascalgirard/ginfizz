170531-17:55:47,480 workflow INFO:
	 Traceback (most recent call last):
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/pipeline/plugins/linear.py", line 43, in run
    node.run(updatehash=updatehash)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/pipeline/engine/nodes.py", line 366, in run
    self._run_interface()
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/pipeline/engine/nodes.py", line 476, in _run_interface
    self._result = self._run_command(execute)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/pipeline/engine/nodes.py", line 607, in _run_command
    result = self._interface.run()
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/interfaces/base.py", line 1085, in run
    runtime = self._run_wrapper(runtime)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/interfaces/base.py", line 1033, in _run_wrapper
    runtime = self._run_interface(runtime)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/interfaces/utility.py", line 450, in _run_interface
    self.imports)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/nipype-0.13.0rc1-py2.7.egg/nipype/utils/misc.py", line 102, in create_function_from_source
    raise_from(RuntimeError(msg), e)
  File "/opt/conda/envs/python2/lib/python2.7/site-packages/future/utils/__init__.py", line 454, in raise_from
    raise e
RuntimeError: 
Error executing function:
 def computeCorrelations(residus, residusRegMean, brainMask):

        '''Function that takes 3 parameters
           residus: the residu of arima time courses
           residuRegMean: the residus mean on determined region i
           if ARIMA is not triggered the residus is the bandpassed signal
           and residuregMean is the average signal on each ROI
           brainMask: the mask of gm and wm thresholded at 0,2
           Computes pearson correlations between the seed eg. residuRegMean
           and all the voxels of the brainMask
           Returns an Nifti images containing the correlations'''

        import os
        import numpy as np
        import nibabel as nib
        from scipy.stats.stats import pearsonr

        # first we get the seed mean signal
        seed_ts_array = np.loadtxt(residusRegMean)

        # from an other hand we get the residus 4D matrix
        fmri_data=nib.load(residus) 
        fmri_array=np.asarray(fmri_data.dataobj)

        # we get the coordinnates of voxels in all gm and wm normalized todo 
        reg_data=nib.load(brainMask) 
        regarray=np.asarray(reg_data.dataobj)
        # transpose(nonzero(a))
        reg_coords = np.transpose(np.nonzero(regarray))
        volume_shape = reg_coords.shape
        print volume_shape
        coords = list(np.ndindex(volume_shape))
        print len(coords)

        # the we iterate the correlation calculation on all voxels of the brain mask

        # the correlation matrix is initialized with all values to 0 
        corr_matrix = np.full(reg_data.shape, 0, dtype=float)

        for i in range(reg_coords.shape[0]):
                target_array = fmri_array[reg_coords[i, 0], reg_coords[i, 1],reg_coords[i,2], :]
                #print target_array
                non_zero_nb = np.count_nonzero(target_array)

               # if target time courses are all null, we do not compute correlation
                if non_zero_nb:
                        try:
                                p = pearsonr(seed_ts_array,target_array) 
                                corr_matrix[reg_coords[i, 0], reg_coords[i, 1],reg_coords[i,2]] = p[0] 
                        except:
                                print("exception calculating pearson correlation") 

        # save matrix in a file
        # create the resulting image
        corr_image = nib.Nifti1Image(corr_matrix,affine=reg_data.affine, header=reg_data.header)
        # save the correlation array 
        out_file = os.path.join(os.getcwd(), "corr_roi_reg.nii")
        nib.save(corr_image, out_file)

        return out_file

Functions in connection strings have to be standalone.
They cannot be declared either interactively or inside
another function or inline in the connect string. Any
imports should be done inside the function
Interface Function failed to run. 

